Команды в Git Bash консоли
clear — Очистить консоль

Навигация
pwd — Показать текущий каталог
ls - Показать файлы в данной папке, кроме скрытых
ls -f — Показать файлы в данной папке, включая и скрытые
cd c:/ — Перейти в конкретный каталог
cd - — Вернуться назад
cd .. — Выйти на 1 уровень вверх
cd ../.. — Выйти на 2 уровня вверх

Создание каталогов
mkdir — Создать папку
cd !$ — Перейти в только что созданную папку
mkdir -p {app1,app2} — Создать сразу несколько папок
mkdir -p app/{css,js} — Создать сразу несколько вложенных папок

Создание файлов
touch index.html — Создать файл index.html
touch app/{css/main.css,js/main.js,index.html} — Создать сразу несколько файлов, никаких лишних пробелов быть не должно

Удаление файлов
touch — позволяет создавать файлы
rm test — Удалить пустую папку test
rm -r test — Удалить папку test с файлами внутри неё

Перемещение файлов
mv app1/*.* app2 — Переместить все файлы из папки app1 в папку app2


Cгенерировать ключи
ssh-keygen -t rsa -b 4096 -C "your_mail@example.com"

Команда для начала использования ключа системой
ssh-add ~/.ssh/id_rsa

Вывести его публичную часть ключа
cat ~/.ssh/id_rsa.pub
Нужно выделить строку, начинающуюся с ssh-rsa и скопировать ее всю.
Далее этот ключ необходимо загрузить на GitHub.

С помощью Git сделать текущую папку репозиторием, чтобы Git начал следить за изменениями файлов
git init -b main

Отображает текущее состояние проекта
git status

Перед коммитом нужно определить, какие именно файлы будут в коммите. Делается с помощью команды git add <имя файла или папки>.
git add img/
git add index.html
git add main.css
или git add . (вконце точка, для выделения всех папок и файлов)

Сделать коммит, то есть зафиксировать текущие изменения и дать им название. 
git commit -m "Имя коммита"

Для связи локального репозитория и репозитория на GitHub, используется команда:
git remote add origin <REMOTE_URL> (смотреть на сайте GitHub)

Отправить изменения (коммит) в репозиторий на GitHub.
git push -u origin main "main название ветки"


git clone https://github.com/Turell7/market.git - склонировали приложение на локальную машину
git checkout dev - перешли в ветвь разработки
git checkout -b feat-example - создаете ветвь для работы с фичей(задачей), вместо example подставляете краткое название фичи
git add . - фиксируете изменения
git commit -m "add features" Делаете коммит
git checkout dev - переходите в ветку dev
git pull - обновляем локальную ветвь dev до актуальной версии
git checkout feat-example перходим в ветвь с фичей
git merge dev - делаем слияние с ветвью dev
Исправляем конфликто, если он есть
git push --set-upstream origin feat-example - пуште ветвь на Github
Если фича закончена, на сайте GitHub отпраляете запрос на pull request в ветвь dev


запуск для С
gcc -Wall -Werror -Wextra hello.c
./a.out
